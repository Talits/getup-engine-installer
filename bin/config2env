#!/usr/bin/env python
#
# Convert yaml/json from file/stdout to env-like format NAME=VALUE
#
#  - List are printed as space-separated string
#  - Dicts/Sets is printed as KEY=VALUE space-separated string
#  - Null/None is not printed, unless PRINT_NULL below is set
#
# If value is an assoc struct (dict/set) then any of following
# keys are looked-up for current value: value, values, item, items
# This allows for terraform's json output to be properly loaded.
#
# Environments:
#
#   EXPORT=1            prefix all lines with 'export'
#   PRINT_NULL=str    print null/none values with 'str'
#

from __future__ import print_function
import os, sys, yaml, json

src = open(sys.argv[1]) if len(sys.argv) > 1 else sys.stdin

try:
    data = yaml.load(src)
except:
    try:
        data = json.load(src)
    except:
        print("Unable to parse config", file=sys.stderr)
        sys.exit(1)

prefix = 'export ' if os.environ.get('EXPORT') == '1' else ''
print_null = os.environ.get('PRINT_NULL')

def print_literal(k, v):
    print('{}{}="{}"'.format(prefix, k.upper(), str(v)))

def print_list(k, v):
    print('{}{}="{}"'.format(prefix, k.upper(), ' '.join(map(str, v))))

def print_assoc(k, v):
    print('{}{}="{}"'.format(prefix, k.upper(), ' '.join({ '{}={}'.format(i, j) for i, j in v })))

def print_item(data):
    for k, v in data.items():

        if isinstance(v, (int, str, float)):
            print_literal(k, v)
            continue
        elif v is None:
            if print_null:
                print_literal(k, print_null)
            continue

        if isinstance(v, (list, tuple)):
            print_list(k, v)
        elif isinstance(v, (dict, set)):
            found = list(filter(lambda i: v.get(i), ['value', 'values', 'item', 'items']))
            if found:
                print_item({k: v[found[0]]})
            else:
                print_assoc(k, v)
        else:
            print('Warnin: Ignored input:', k, file=sys.stderr)

print_item(data)
