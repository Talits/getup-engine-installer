#!/bin/bash

if [ "$PROVIDER" == aws ]; then
    function __do_setup_state_backend()
    {
        local BUCKET_NAME=${STATE_BACKEND#s3://}

        AWS_S3_BUCKET_NAME=${BUCKET_NAME} \
            envsubst < /getup-engine/state-backend/$PROVIDER-backend.tf.in > $STATE_DIR/$PROVIDER-backend.tf

        ln -fs $STATE_DIR/$PROVIDER-backend.tf /getup-engine/terraform/$PROVIDER/backend.tf

        {
            aws s3api head-bucket --bucket ${BUCKET_NAME} && has_bucket=1 || has_bucket=0
            aws s3api head-object --bucket ${BUCKET_NAME} --key terraform/state/terraform.tfstate && has_state_file=1 || has_state_file=0
        } &>/dev/null

        if [ $has_bucket -eq 0 ]; then
            echo Creating state backend bucket $STATE_BACKEND
            aws s3api create-bucket --bucket ${BUCKET_NAME} \
                    --acl private \
                    --create-bucket-configuration LocationConstraint=${AWS_DEFAULT_REGION}
            sleep 5
            aws s3api put-bucket-versioning --bucket ${BUCKET_NAME} --versioning-configuration Status=Enabled
        fi

        ( cd /getup-engine/terraform/$PROVIDER && ${TERRAFORM_BIN} init )

        if [ $has_state_file -eq 0 ]; then
            if [ -e $STATE_DIR/terraform.tfstate ]; then
                echo Pushing existing state to backend
                ( cd /getup-engine/terraform/$PROVIDER && terraform state push $STATE_DIR/terraform.tfstate )
                mv -v $STATE_DIR/terraform.tfstate $STATE_DIR/terraform.tfstate.backup.$(date +%Y%m%d-%H%M%S-%Z)
            fi
        fi
    }
    __do_setup_state_backend
    unset __do_setup_state_backend
elif [ "$PROVIDER" == azure ]; then
    state="${STATE_DIR}/terraform.tfstate"
fi
