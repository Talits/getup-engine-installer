from itertools import product
from django.core.urlresolvers import reverse_lazy

# Vendoring
VENDOR_NAME      = '{{ getupcloud_vendor_name }}'
VENDOR_TITLE     = '{{ getupcloud_vendor_title }}'
VENDOR_NAMESPACE = '{{ getupcloud_vendor_namespace }}'

INTERCOM_SECURE_MODE_SECRET_KEY = '' if TESTING else '{{ getupcloud_intercom_secure_mode_secret_key }}'
ANALYTICS_WRITE_KEY = '' if TESTING else '{{ getupcloud_analytics_write_key }}'

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '{{ getupcloud_api_django_secret_key }}'

CLUSTER_DOMAIN = '{{ getupcloud_cluster_zone}}'
CLUSTER_PUBLIC_DOMAIN = '{{ getupcloud_apps_zone }}'
TRUSTED_DOMAINS = '{{ getupcloud_api_trusted_domains }}'

trusted_domains = list(filter(
    lambda x: x,
    [ CLUSTER_DOMAIN, CLUSTER_PUBLIC_DOMAIN, '{{ getupcloud_namespace }}.svc' ] + [ dom.strip().strip('.') for dom in TRUSTED_DOMAINS.split(',')]))

doted_trusted_domains = [ '.' + dom.strip().lstrip('.') for dom in trusted_domains ]

SAFE_SUBDOMAINS        = doted_trusted_domains
CSRF_TRUSTED_ORIGINS   = doted_trusted_domains
# https://github.com/ottoyiu/django-cors-headers/
CORS_ORIGIN_ALLOW_ALL  = False
CORS_ALLOW_CREDENTIALS = True
DOMAIN_DEFAULT_PREFIXES = ['api', 'gapi', 'console', 'portal']
CORS_ORIGIN_WHITELIST  = DOMAIN_DEFAULT_PREFIXES + trusted_domains + [ '.'.join(x) for x in product(DOMAIN_DEFAULT_PREFIXES, trusted_domains) ]

if ON_OPENSHIFT:
    ALLOWED_HOSTS = CORS_ORIGIN_WHITELIST
else:
    ALLOWED_HOSTS = [ '*' ]

ROBOTS_TXT = [
    'User-Agent: *',
    'Disallow: /',
]

IMPERSONATE_PROXY_USER = '{{ getupcloud_api_impersonate_username }}'

AUTH_USER_MODEL      = 'customer.User'
DEFAULT_USER_GROUP   = 'customer'
GROUPS = [
    {
        'name': DEFAULT_USER_GROUP,
        'permissions': (
            'delete_token',
            'change_technicalcontact',
            'change_billingcontact',
            'add_project',
            'change_project',
            'delete_project',
            'add_paymentmethod',
            'change_paymentmethod',
            'delete_paymentmethod',
            'add_creditcardpaymentmethod',
            'change_creditcardpaymentmethod',
            'delete_creditcardpaymentmethod',
        )
    },
    {
        'name': 'billing',
        'permissions': (
            'add_billingcontact',
            'change_billingcontact',
            'delete_billingcontact',
            'add_invoice',
            'change_invoice',
            'delete_invoice',
            'add_invoiceproject',
            'change_invoiceproject',
            'delete_invoiceproject',
            'add_invoicerecord',
            'change_invoicerecord',
            'delete_invoicerecord',
        )
    },
]

DEFAULT_SUPPORT_PLAN = 'free'
DEFAULT_MAX_PROJECTS = int('{{ getupcloud_api_default_max_projects }}')
VALIDATED_MAX_PROJECTS = int('{{ getupcloud_api_validated_max_projects }}')
LOCKED_PROJECTS_EXPIRE_DAYS = int('{{ getupcloud_api_locked_projects_expire_days }}')
POD_BUILD_DEPLOY_DURATION_ALERT = 30 * 60 ## in seconds

SITE_ID = 1
SITES = [
    { 'id': 1, 'domain': CLUSTER_DOMAIN,                     'name': VENDOR_TITLE },
    { 'id': 2, 'domain': '{{ getupcloud_portal_endpoint }}', 'name': '{} Portal'.format(VENDOR_TITLE) },
    { 'id': 3, 'domain': '{{ kubernetes_api_endpoint }}',    'name': '{} Openshift API'.format(VENDOR_TITLE) },
    { 'id': 4, 'domain': '{{ getupcloud_api_endpoint }}',    'name': '{} API'.format(VENDOR_TITLE) },
]

ROOT_URLCONF = 'getup.urls'
SITE_ROOT    = reverse_lazy('web-root')

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'getup.context_processors.settings',
            ],
        },
    },
]

CONTEXT_SETTINGS_KEYS = (
    'VENDOR_NAME',
    'VENDOR_TITLE',
    'VENDOR_NAMESPACE',
    'DEFAULT_FROM_EMAIL',
    'CONTACT_EMAIL',
    'BILLING_EMAIL',
    'OPENSHIFT_CONSOLE_BASE_URL',
    'CLUSTER_PUBLIC_DOMAIN',
    'CLUSTER_DOMAIN',
    'OC_VERSION_NUMBER',
    'OC_VERSION_TAG',
)

# Prometheus
ENABLE_PROMETHEUS = as_bool('{{ getupcloud_api_enable_prometheus }}', False)

if ENABLE_PROMETHEUS:
    PROMETHEUS_METRICS_EXPORT_PORT = 8081
    PROMETHEUS_METRICS_EXPORT_ADDRESS = ''  # all addresses

# Sessions

SESSION_ENGINE = 'django.contrib.sessions.backends.signed_cookies'
if ON_OPENSHIFT:
    SESSION_COOKIE_DOMAIN = '.' + CLUSTER_DOMAIN
SESSION_COOKIE_HTTPONLY = False
#SESSION_COOKIE_AGE = 1440

# WSGI

WSGI_APPLICATION = 'getup.wsgi.application'

## EMAIL

EMAIL_BACKEND = '{{ getupcloud_api_email_backend }}'

if EMAIL_BACKEND == 'django_mailgun.MailgunBackend':
    MAILGUN_ACCESS_KEY  = '{{ getupcloud_api_mailgun_access_key }}'
    MAILGUN_SERVER_NAME = CLUSTER_DOMAIN
elif EMAIL_BACKEND == 'django.core.mail.backends.smtp.EmailBackend':
    EMAIL_HOST          = '{{ getupcloud_api_smtp_hostname }}'
    EMAIL_HOST_USER     = '{{ getupcloud_api_smtp_username }}' or 'admin@{}'.format(CLUSTER_DOMAIN)
    EMAIL_HOST_PASSWORD = '{{ getupcloud_api_smtp_password }}'

DEFAULT_FROM_EMAIL = '{{ getupcloud_api_default_from_email }}' or '{} <hello@{}>'.format(VENDOR_TITLE, CLUSTER_DOMAIN)
CONTACT_EMAIL      = '{{ getupcloud_api_contact_email }}' or 'contact@{}'.format(CLUSTER_DOMAIN)
BILLING_EMAIL      = '{{ getupcloud_api_billing_email }}' or 'no-reply@{}'.format(CLUSTER_DOMAIN)

# Database
engines = {
    'sqlite':       'django.db.backends.sqlite3',
    'postgresql':   'django.db.backends.postgresql',
    'mysql':        'django.db.backends.mysql', ## 'django_prometheus.db.backends.mysql'
}

default_ports = {
    'postgresql': 5342,
    'mysql': 3306
}

def database_config(testing=False):
    database_engine = '{{ getupcloud_api_database_engine }}'
    engine = engines[database_engine]

    if database_engine == 'sqlite':
        name = os.path.join(settings.BASE_DIR, '{{ getupcloud_api_database_name }}')
        service_name = None
    else:
        name = '{{ getupcloud_api_database_name }}'
        service_name = ('{{ getupcloud_api_database_service_name }}')

    db = {
        'ENGINE': engine,
        'NAME': name,
        'USER': '',
        'PASSWORD': '',
        'HOST': '',
        'PORT': '',
    }

    if service_name:
        service_prefix = service_name.replace('-', '_').upper()
        db.update({
            'USER': '{{ getupcloud_api_database_user }}',
            'PASSWORD': '{{ getupcloud_api_database_password }}',
            'HOST': os.getenv('{}_SERVICE_HOST'.format(service_prefix)) or service_name.split(':')[0],
            'PORT': os.getenv('{}_SERVICE_PORT'.format(service_prefix)) or os.getenv('DATABASE_SERVICE_PORT') or default_ports.get(database_engine, 0),
        })

    return db

DATABASES = {
    'default': database_config()
}

# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGES = [
    ('en',    'English'),
    ('pt-br', 'Portugues Brasileiro'),
]

LANGUAGE_CODE = 'en'

TIME_ZONE = '{{ getupcloud_api_time_zone }}' or 'UTC'

USE_I18N = as_bool('{{ getupcloud_api_use_i18n }}', True)

USE_L10N = as_bool('{{ getupcloud_api_use_l10n }}', True)

USE_TZ = as_bool('{{ getupcloud_api_use_tz }}', True)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STORAGE_BACKEND = '{{ getupcloud_api_storage_backend }}'

if STORAGE_BACKEND:
    DEFAULT_FILE_STORAGE = STATICFILES_STORAGE = STORAGE_BACKEND

AZURE_ACCOUNT_NAME = '{{ getupcloud_api_azure_storage_account_name }}'
AZURE_ACCOUNT_KEY  = '{{ getupcloud_api_azure_storage_account_key }}'
AZURE_CONTAINER    = '{{ getupcloud_api_azure_storage_container_name }}'

AWS_ACCESS_KEY_ID       = '{{ getupcloud_api_aws_access_key_id }}'
AWS_SECRET_ACCESS_KEY   = '{{ getupcloud_api_aws_secret_access_key }}'
AWS_STORAGE_BUCKET_NAME = '{{ getupcloud_api_aws_storage_bucket_name }}'
AWS_LOCATION            = '{{ getupcloud_api_aws_location }}'

##
## Slack
## Log internal errors to Slack

SLACK_TOKEN = '{{ getupcloud_slack_token }}'
LOG_TO_SLACK = as_bool(SLACK_TOKEN, False)
if LOG_TO_SLACK:
    SLACK_BACKEND = 'django_slack.backends.ConsoleBackend' if TESTING else 'django_slack.backends.RequestsBackend'
    SLACK_USERNAME = '{{ getupcloud_slack_username }}'
    SLACK_FAIL_SILENTLY = as_bool('{{ getupcloud_slack_fail_silently }}', True)
    SLACK_CHANNEL = '{{ getupcloud_slack_operations_channel }}' or '#{}-errors'.format(VENDOR_NAME)
    if not SLACK_CHANNEL.startswith('#'):
        SLACK_CHANNEL = '#' + SLACK_CHANNEL

##
##  Logging
##
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'color': {
            'format': '[%(asctime)s %(process)d %(filename)s:%(lineno)d \033[40;35;1m%(email)s\033[0;0;0m] [\033[40;33;1m%(levelname)s\033[0;0;0m] \033[40;37;1m%(message)s\033[0;0;0m',
        },
        'test': {
            'format': '\033[40;33;1m%(levelname)s\033[0;0;0m [%(filename)s:%(lineno)d \033[40;35;1m%(email)s\033[0;0;0m] \033[40;37;1m%(message)s\033[0;0;0m',
        },
        'verbose': {
            'format': '[%(asctime)s %(process)d %(filename)s:%(lineno)d %(email)s] [%(levelname)s] %(message)s',
        },
        'simple': {
            'format': '[%(asctime)s] %(email)s %(levelname)s %(message)s'
        },
        'cron': {
            'format': '[%(asctime)s %(filename)s:%(lineno)d] %(levelname)s %(message)s',
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        },
        'request': {
            '()': 'django_requestlogging.logging_filters.RequestFilter',
        },
    },
    'handlers': {
        'production': {
            'level': LOG_LEVEL,
            #'class': 'logging.FileHandler',
            'class': 'logging.StreamHandler',
            'filters': ['request'],
            'formatter': '{{ getupcloud_api_log_fmt }}' or 'verbose',
        },
        'console':{
            'level': LOG_LEVEL,
            'class': 'logging.StreamHandler',
            'filters': ['request'],
            'formatter': '{{ getupcloud_api_log_fmt }}' or 'color',
        },
        'mail_admins': {
            'level': LOG_LEVEL,
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        },
        'slack': {
            'level': 'ERROR',
            #'filters': ['require_debug_false'],
            'class': 'django_slack.log.SlackExceptionHandler' if LOG_TO_SLACK else 'logging.StreamHandler',
        },
    },
    'loggers': {
        'production': {
            'handlers': ['production' ] + (['slack'] if LOG_TO_SLACK else []),
            'propagate': False,
            'level': LOG_LEVEL,
        },
        'django': {
            'handlers': ['console', 'slack'],
            'propagate': False,
            'level': LOG_LEVEL,
        },
        'django.request': {
            'handlers': ['mail_admins'],
            'level': LOG_LEVEL,
            'propagate': True,
        },
        'console': {
            'handlers': ['console'],
            'propagate': False,
            'level': LOG_LEVEL,
        },
    }
}

DEFAULT_LOGGER = '{{ getupcloud_api_django_default_logger }}' if ON_OPENSHIFT else 'console'

################
### Openshift

OPENSHIFT_API_BASE_URL       = 'https://{{ kubernetes_api_endpoint }}'.rstrip('/')
OPENSHIFT_CONSOLE_BASE_URL   = '{{ getupcloud_portal_base_url }}'
OPENSHIFT_SERVER_VERIFY_CERT = False
OPENSHIFT_SERVICE_ACCOUNT_TOKEN_FILE = '{{ kubernetes_service_account_token_file }}'
OPENSHIFT_PROJECT_NODE_SELECTOR = '{{ osm_default_node_selector }}'

#################
## AllAuth

ACCOUNT_ADAPTER                   = 'getup.adapter.GetupAccountAdapter'
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_USERNAME_REQUIRED         = False
ACCOUNT_EMAIL_REQUIRED            = True
ACCOUNT_AUTHENTICATION_METHOD     = 'email'

# If 'false', only admin can signup new users
ENABLE_SIGNUP  = as_bool('{{ getupcloud_api_enable_signup }}', True)

# VALIDATE_ACCOUNT ='signup' | 'confirm_email' | 'set_payment_method'
VALIDATE_ACCOUNT = '{{ getupcloud_api_validate_account }}'

# ACCOUNT_EMAIL_VERIFICATION = "mandatory" | "optional" | "none"
ACCOUNT_EMAIL_VERIFICATION = 'optional' if VALIDATE_ACCOUNT == 'signup' else 'mandatory'

ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS  = 7
ACCOUNT_EMAIL_CONFIRMATION_HMAC         = False # confirmation url is not stored in database if set to True (allauth>=0.26.0)
ACCOUNT_UNIQUE_EMAIL                    = True
ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = OPENSHIFT_CONSOLE_BASE_URL
ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL = OPENSHIFT_CONSOLE_BASE_URL

#ACCOUNT_FORMS                           = { 'signup': 'getup.forms.AccountSignupForm'}

LOGIN_REDIRECT_URL                      = OPENSHIFT_CONSOLE_BASE_URL
ACCOUNT_SIGNUP_PASSWORD_VERIFICATION    = False
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION     = True
ACCOUNT_LOGOUT_ON_GET                   = True
ACCOUNT_LOGOUT_REDIRECT_URL             = OPENSHIFT_CONSOLE_BASE_URL
ACCOUNT_SESSION_REMEMBER                = False
ACCOUNT_SESSION_COOKIE_AGE              = 86400 # 1day

SOCIALACCOUNT_ADAPTER                   = 'getup.adapter.GetupSocialAccountAdapter'
#SOCIALACCOUNT_FORMS                     = { 'signup': 'getup.forms.SignupForm'}
SOCIALACCOUNT_AUTO_SIGNUP               = False
SOCIALACCOUNT_EMAIL_REQUIRED            = True
SOCIALACCOUNT_EMAIL_VERIFICATION        = True
SOCIALACCOUNT_PROVIDERS                 = {
    'github': {
        'SCOPE': [ 'user:email', 'admin:repo_hook', 'admin:org_hook', 'repo' ]
    }
}

#################
## RestFramework

REST_FRAMEWORK = {
    'PAGE_SIZE': 30,
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.URLPathVersioning',
    'DEFAULT_VERSION': 'v1',
    'ALLOWED_VERSIONS': [ 'v1' ],
    'EXCEPTION_HANDLER': 'getup.exc_handler.openshift_auth_exception_handler',
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'getup.authentication.TokenAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'getup.authentication.ImpersonateAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.DjangoModelPermissions',
    ),
    'DEFAULT_RENDERER_CLASSES': (
        'getup.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    )
}

if as_bool('{{ getupcloud_api_allow_session_authentication }}', False):
    REST_FRAMEWORK['DEFAULT_AUTHENTICATION_CLASSES'].insert(0, 'rest_framework.authentication.SessionAuthentication')

#################
## RestAuth

REST_AUTH_CREATE_TOKEN_ON_REGISTER = False
REST_AUTH_TOKEN_MODEL = 'getup.models.Token'
REST_AUTH_TOKEN_CREATOR = 'getup.authentication.create_auth_token'
OLD_PASSWORD_FIELD_ENABLED = True

REST_AUTH_SERIALIZERS = {
    'TOKEN_SERIALIZER': 'getup.serializers.TokenSerializer',
    'USER_DETAILS_SERIALIZER': 'customer.serializers.UserSerializer',
    'PASSWORD_RESET_SERIALIZER': 'getup.serializers.PasswordResetSerializer',
}

REST_AUTH_REGISTER_SERIALIZERS = {
    'REGISTER_SERIALIZER': 'getup.serializers.RegisterSerializer',
}

####################
## Install script do OC

OC_VERSION_NUMBER = '{{ getupcloud_oc_version_number }}'
OC_VERSION_TAG = '{{ getupcloud_oc_version_tag }}'

####################
## Zendesk SSO/JWT
ZENDESK_DOMAIN = '{{ getupcloud_zendesk_domain }}'
ZENDESK_TOKEN = '{{ getupcloud_zendesk_token }}'

####################
## Billing
BILLING_PROJECT_USAGE_URL = 'http://{{ getupcloud_billing_service_name }}:{{ getupcloud_billing_service_port }}/usage/{namespace_uid}'

PAGARME_API_KEY               = '{{ getupcloud_api_pagarme_api_key }}'
PAGARME_LIVE                  = PAGARME_API_KEY.startswith('ak_live_')
PAGARME_CARDS_ENDPOINT        = 'https://api.pagar.me/1/cards'
PAGARME_TRANSACTIONS_ENDPOINT = 'https://api.pagar.me/1/transactions'
PAGARME_POSTBACK_URL          = '{{ getupcloud_api_pagarme_postback_url }}'

DEFAULT_VALIDATION_CREDIT     = {{ getupcloud_api_default_validation_credit }}
DEFAULT_TIER_OFFER            = '{{ getupcloud_api_default_tier_offer }}'

####################
## Applications
INSTALLED_APPS = list(filter(None, (
    'django.contrib.contenttypes',
    'django.contrib.auth',
    'django.contrib.sites',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.admin',
    'django_extensions',
    'corsheaders',
    'rest_framework',
    'getup',
    'web',
    'django_slack' if LOG_TO_SLACK else '',
    'storages' if ON_OPENSHIFT and not DEBUG else '',
    'django_fsm',
    'rest_auth',
    'rest_auth.registration',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.github',
    'allauth.socialaccount.providers.gitlab',
    'manager',
    'customer',
    'contact',
    'payment',
    'billing',
    'service',
    'invoice',
    'tier',
    'project',
    'django_prometheus' if ENABLE_PROMETHEUS else '',
)))

MIDDLEWARE_CLASSES = list(filter(None, (
    'django_prometheus.middleware.PrometheusBeforeMiddleware' if ENABLE_PROMETHEUS else '',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'corsheaders.middleware.CorsMiddleware', # https://github.com/ottoyiu/django-cors-headers/
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
#    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django_prometheus.middleware.PrometheusAfterMiddleware' if ENABLE_PROMETHEUS else '',
)))

AUTHENTICATION_BACKENDS = list(filter(bool, (
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
    'getup.backend.ImpersonateBackend',
    '{{ getupcloud_api_extra_authentication_backend }}',
)))
