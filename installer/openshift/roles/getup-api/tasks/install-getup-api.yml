---
- include_role:
    name: getup-namespace

- name: Copy cluster-metrics script
  copy:
    src: files/cluster-metrics
    dest: /usr/local/bin/cluster-metrics
    mode: 0755

- name: Add cluster-admin role to service account
  oc_adm_policy_user:
    user: "system:serviceaccount:{{ getupcloud_namespace }}:{{ item }}"
    resource_kind: cluster-role
    resource_name: cluster-admin
    state: present
  with_items:
    - project-deployer

- name: Create service account getup:project-deployer
  oc_serviceaccount:
    name: project-deployer
    namespace: "{{ getupcloud_namespace }}"
    state: present

- name: Remove self-provisioner from authenticated users
  oc_adm_policy_group:
    group: system:authenticated:oauth
    resource_kind: cluster-role
    resource_name: self-provisioner
    state: absent

- name: Disable self-provisioners auto update
  shell: >
    {{ oc }} patch clusterrolebinding.rbac self-provisioner
    -p '{ "metadata": { "annotations": { "rbac.authorization.kubernetes.io/autoupdate": "false" } } }'
  ignore_errors: yes

## Database

- name: Create database PVC
  oc_pvc:
    state: present
    namespace: "{{ getupcloud_namespace }}"
    name: "{{ getupcloud_api_database_service_name }}"
    access_modes:
    - ReadWriteOnce
    volume_capacity: 50Gi

- name: Generate api database deployment
  template:
    src: "templates/mysql.yaml.j2"
    dest: "mysql.yaml"
  vars:
    database_service_name: "{{ getupcloud_api_database_service_name }}"
    database_name: "{{ getupcloud_api_database_name }}"
    database_username: "{{ getupcloud_api_database_user }}"
    database_password: "{{ getupcloud_api_database_password }}"

- name: Create api database deployment
  oc_obj:
    state: present
    namespace: "{{ getupcloud_namespace }}"
    kind: deploymentconfig
    name: "{{ getupcloud_api_database_service_name }}"
    files:
      - "mysql.yaml"
    delete_after: yes

- name: Create Database service
  oc_service:
    namespace: "{{ getupcloud_namespace }}"
    name: "{{ getupcloud_api_database_service_name }}"
    ports:
    - name: 3306-tcp
      port: 3306
      protocol: TCP
      targetPort: 3306
    selector:
      app: "{{ getupcloud_api_database_service_name }}"
    session_affinity: None
    service_type: ClusterIP

- name: Wait for database to become ready
  wait_for:
    host: "{{ getupcloud_api_database_service_name }}.{{ getupcloud_namespace }}.svc"
    port: 3306
    delay: 2
    sleep: 2
    state: present

## API Application

- name: Generate api config
  template:
    src: "templates/settings.py.j2"
    dest: "settings.py"

- name: Create api configmap
  oc_configmap:
    state: present
    name: api
    namespace: "{{ getupcloud_namespace }}"
    from_file:
      settings.py: "settings.py"

- name: Generate api deployment
  template:
    src: "templates/api.yaml.j2"
    dest: "api.yaml"

- name: Create api deployment
  oc_obj:
    state: present
    namespace: "{{ getupcloud_namespace }}"
    kind: deploymentconfig
    name: api
    files:
      - "api.yaml"
    delete_after: yes

- name: Create api service
  oc_service:
    namespace: "{{ getupcloud_namespace }}"
    name: api
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: api
    session_affinity: None
    service_type: ClusterIP

- include_role:
    name: getup-route
  vars:
    name: gapi
    host: "{{ getupcloud_api_endpoint }}"
    service: api

- name: Wait for API to become available
  # Using curl here since the uri module requires python-httplib2 and
  # wait_for port doesn't provide health information.
  command: >
    curl --silent -k --max-time 5 http://api.{{ getupcloud_namespace }}.svc:8080/health/
  args:
    warn: no
  register: api
  until: api.stdout != ''
  retries: 120
  delay: 3
  changed_when: false

- name: Load initial data
  shell: >
    {{ oc }} rsh -n getup -c api dc/api
    ./load_initial_data.sh
    '{{ getupcloud_api_admin_username }}'
    '{{ getupcloud_api_admin_password }}'
    '{{ getupcloud_api_impersonate_username }}'
    '{{ getupcloud_api_impersonate_password }}'
